{"version":3,"sources":["_common/component/layout/Container.tsx","business/scheduler/service/SchedulerService.ts","_common/component/layout/Container.module.css","_common/component/element/icon-label/IconLabel.tsx","business/scheduler/component/ScheduleForm.tsx","business/page/ScheduleDetail.tsx"],"names":["Container","title","size","children","offset","className","clsx","Styles","Column","makeSearchArgs","p","res","schedulerName","scheduleId","max","sort","sortOrder","epochFrom","epochTo","listAllSchedulers","a","get","getSchedulersUrl","makeScheduleInfoModel","schedules","map","o","id","schedule","scheduler","timestamp","epoch","targetTopic","targetId","value","makeScheduleModel","topic","searchLiveSchedules","getLiveSchedulesUrl","result","console","log","searchSchedules","getSchedulesUrl","getScheduleDetail","getScheduleDetailUrl","length","Error","getLiveScheduleDetail","getLiveScheduleDetailUrl","module","exports","IconLabel","props","items","hasOwnProperty","data","index","icon","label","Fragment","formatUnixTime","time","fmt","dt","fromUnixTime","format","getScheduleValue","atob","err","error","ScheduleForm","onClose","live","t","useTranslation","useState","setSchedule","useEffect","then","style","padding","disabled","textAlign","type","defaultValue","rows","justifyContent","marginTop","onClick","ScheduleDetail","history","useHistory","useParams","goBack"],"mappings":"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","file":"static/js/6.b241dd7a.chunk.js","sourcesContent":["import clsx from \"clsx\";\nimport Styles from \"./Container.module.css\";\n\nexport type ContainerProps = {\n  title: string;\n  size?: 12 | 10 | 8;\n};\nconst Container: React.FC<ContainerProps> = ({\n  title,\n  size = 12,\n  children,\n}) => {\n  let offset = \"\";\n  if (size === 8) {\n    offset = \"is-offset-2\";\n  } else if (size === 10) {\n    offset = \"is-offset-1\";\n  }\n  return (\n    <div className=\"container has-text-centered\">\n      <div\n        className={clsx(\n          \"column\",\n          size ? \"is-\" + size : null,\n          offset,\n          Styles.Column\n        )}\n      >\n        <h1 className=\"title\">{title}</h1>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","import { get } from \"_common/service/ApiUtil\";\nimport {\n  getLiveScheduleDetailUrl,\n  getLiveSchedulesUrl,\n  getScheduleDetailUrl,\n  getSchedulersUrl,\n  getSchedulesUrl,\n} from \"_core/service/config\";\nimport { Schedule, ScheduleInfo, Scheduler } from \"../type\";\n\nexport type SortType = \"id\" | \"epoch\" | \"timestamp\";\nexport type SortOrder = \"asc\" | \"desc\";\n\nexport type SearchParams = {\n  scheduleId?: string;\n  epochFrom?: number;\n  epochTo?: number;\n  sort?: SortType;\n  sortOrder?: SortOrder;\n  schedulerName: string;\n  max: number; // -1  for all\n};\n\nexport const makeSearchArgs = (p: SearchParams): string => {\n  let res = `?scheduler-name=${p.schedulerName}`;\n  if (p.scheduleId) {\n    res += `&schedule-id=${p.scheduleId}`;\n  }\n  if (p.max) {\n    res += `&max=${p.max}`;\n  }\n  if (p.sort) {\n    res += `&sort-by=${p.sort} ${p.sortOrder || \"asc\"}`;\n  }\n  if (p.epochFrom) {\n    res += `&epoch-from=${p.epochFrom}`;\n  }\n  if (p.epochTo) {\n    res += `&epoch-to=${p.epochTo}`;\n  }\n  return res;\n};\n\nexport const listAllSchedulers = async (): Promise<Scheduler[]> => {\n  return await get(getSchedulersUrl());\n};\nexport const makeScheduleInfoModel = (schedules: any[]): ScheduleInfo[] => {\n  if (schedules) {\n    return schedules.map((o) => {\n      return {\n        id: o.schedule.id,\n        scheduler: o.scheduler,\n        timestamp: o.schedule.timestamp,\n        epoch: o.schedule.epoch,\n        targetTopic: o.schedule[\"target-topic\"],\n        targetId: o.schedule[\"target-key\"],\n        value: o.schedule.value,\n      };\n    });\n  }\n  return schedules;\n};\n\nexport const makeScheduleModel = ({schedule}: any, schedulerName: string): Schedule => {\n  return {\n    id: schedule.id,\n    scheduler: schedulerName,\n    timestamp: schedule.timestamp,\n    epoch: schedule.epoch,\n    targetTopic: schedule[\"target-topic\"],\n    targetId: schedule[\"target-key\"],\n    value: schedule.value,\n    topic: schedule.topic,\n  };\n};\nexport const searchLiveSchedules = async (p: SearchParams): Promise<ScheduleInfo[]> => {\n  const result: { found: number; schedules: any[] } = await get(getLiveSchedulesUrl(p.schedulerName) + makeSearchArgs(p));\n\n  const res = makeScheduleInfoModel(result.schedules);\n  console.log(res);\n  return res;\n};\nexport const searchSchedules = async (p: SearchParams): Promise<ScheduleInfo[]> => {\n  const result: { found: number; schedules: any[] } = await get(getSchedulesUrl(p.schedulerName) + makeSearchArgs(p));\n  return makeScheduleInfoModel(result.schedules);\n};\nexport const getScheduleDetail = async (schedulerName: string, id: string): Promise<Schedule> => {\n  const result: Schedule[] = await get(getScheduleDetailUrl(schedulerName, id));\n\n  if (result.length > 0) {\n    return makeScheduleModel(result[0], schedulerName);\n  }\n  throw new Error(\"Not found\");\n};\n\nexport const getLiveScheduleDetail = async (schedulerName: string, id: string): Promise<Schedule> => {\n  const result: Schedule[] = await get(getLiveScheduleDetailUrl(schedulerName, id));\n\n  if (result.length > 0) {\n    return makeScheduleModel(result[0], schedulerName);\n  }\n  throw new Error(\"Not found\");\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Column\":\"Container_Column__2aeNs\"};","import React from \"react\";\n\nexport type IconLabelItem = {\n  icon: string;\n  label: React.ReactNode;\n};\nexport type IconLabelItems = {\n  data: IconLabelItem[];\n};\n\nexport type IconLabelProps = IconLabelItems | IconLabelItem;\nexport function isIconLabelItems(\n  value: IconLabelItems | IconLabelItem\n): value is IconLabelItems {\n  return value.hasOwnProperty(\"data\");\n}\n\nconst IconLabel: React.FC<IconLabelProps> = (props) => {\n  let items: IconLabelItem[] = isIconLabelItems(props) ? props.data : [props];\n  return (\n    <span className=\"icon-text\">\n      {items.map(({ icon, label }: IconLabelItem, index: number) => {\n        return (\n          <React.Fragment key={index}>\n            <span className=\"icon\">\n              <i className={`fas fa-${icon}`}></i>\n            </span>\n            <span>{label}</span>\n          </React.Fragment>\n        );\n      })}\n    </span>\n  );\n};\n\nexport default IconLabel;\n","import { useTranslation } from \"react-i18next\";\nimport fromUnixTime from \"date-fns/fromUnixTime\";\nimport format from \"date-fns/format\";\n\nimport { useEffect, useState } from \"react\";\nimport { Schedule } from \"../type\";\nimport { getLiveScheduleDetail, getScheduleDetail } from \"../service/SchedulerService\";\nimport IconLabel from \"_common/component/element/icon-label/IconLabel\";\n\nconst formatUnixTime = (time: number, fmt: string) => {\n  if (time) {\n    const dt = fromUnixTime(time);\n    return format(dt, fmt);\n  }\n  return \"\";\n};\n\nconst getScheduleValue = (value:string) => {\n  try {\n    return atob(value);\n  } catch(err) {\n    console.error(err);\n  }\n  return value;\n}\n\nexport type ScheduleFormProps = {\n  schedulerName: string;\n  scheduleId: string;\n  onClose: () => void;\n  live?:boolean;\n};\n\nconst ScheduleForm: React.FC<ScheduleFormProps> = ({ schedulerName, scheduleId, onClose, live }) => {\n  const { t } = useTranslation();\n  const [schedule, setSchedule] = useState<Schedule>();\n  useEffect(() => {\n    if (schedulerName && scheduleId) {\n      live ? getLiveScheduleDetail(schedulerName, scheduleId).then((result) => {\n        setSchedule(result);\n      }): getScheduleDetail(schedulerName, scheduleId).then((result) => {\n        setSchedule(result);\n      });\n    }\n  }, [schedulerName, scheduleId, live]);\n\n  return (\n    <div className=\"box\" style={{ padding: \"3rem\" }}>\n      {schedule && (\n        <div className=\"columns\">\n          <div className=\"column\">\n            <fieldset disabled style={{ textAlign: \"left\" }}>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-id\")}</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" defaultValue={schedule.id} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-scheduler\")}</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" defaultValue={schedule.scheduler} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-creation-date\")}</label>\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"tex\"\n                    defaultValue={formatUnixTime(schedule.timestamp, t(\"Calendar-date-hour-format\"))}\n                  />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-trigger-date\")}</label>\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"tex\"\n                    defaultValue={formatUnixTime(schedule.epoch, t(\"Calendar-date-hour-format\"))}\n                  />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-source-topic\")}</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" defaultValue={schedule.topic} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-target-topic\")}</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" defaultValue={schedule.targetTopic} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">{t(\"Schedule-field-target-id\")}</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" defaultValue={schedule.targetId} />\n                </div>\n              </div>\n            </fieldset>\n          </div>\n          <div className=\"column\">\n          <fieldset disabled style={{ textAlign: \"left\" }}>\n            <div className=\"field\">\n              <label className=\"label\">{t(\"Schedule-field-value\")}</label>\n              <div className=\"control\">\n                <textarea rows={12} className=\"textarea\" defaultValue={getScheduleValue(schedule.value)} />\n              </div>\n            </div>\n            </fieldset>\n          </div>\n        </div>\n      )}\n      <div className=\"field is-grouped \" style={{ justifyContent: \"center\", marginTop: \"2rem\" }}>\n        <div className=\"control\">\n          <button className=\"button is-link\" onClick={onClose}>\n            <IconLabel icon=\"times\" label={t(\"Close-button\")} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleForm;\n","import ScheduleForm from \"business/scheduler/component/ScheduleForm\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Container from \"_common/component/layout/Container\";\n\ntype ScheduleDetailUrlParams = { schedulerName: string; scheduleId: string };\n\nconst ScheduleDetail = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const handleClose = () => {\n    history.goBack();\n  };\n\n  const { schedulerName, scheduleId } = useParams<ScheduleDetailUrlParams>();\n\n  return (\n    <Container\n      size={8}\n      title={t(\"Page-title-schedule-detail\", { id: scheduleId })}\n    >\n      <ScheduleForm\n        schedulerName={schedulerName}\n        scheduleId={scheduleId}\n        onClose={handleClose}\n      />\n    </Container>\n  );\n};\n\nexport default ScheduleDetail;\n"],"sourceRoot":""}